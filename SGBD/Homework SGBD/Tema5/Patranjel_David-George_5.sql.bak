/*Tema 5 - David Patranjel 251*/
/*ex1*/
create table info_dgp
(
    utilizator  varchar2(30)    not null,
    data date not null,
    comanda varchar2(256) not null,
    nr_linii    number(3) not null,
    eroare		varchar2(256)
);

commit;

alter table info_dgp
    modify comanda varchar2(500);

/*ex2 cu modif. functiei de la ex2*/
CREATE OR REPLACE FUNCTION f2_dgp
    (v_nume employees.last_name%TYPE DEFAULT 'Bell') 
RETURN NUMBER IS
        salariu employees.salary%type;
        v_utilizator info_dgp.utilizator%TYPE;
        v_rows number(3);
    BEGIN
        SELECT user INTO v_utilizator from dual;
        
        SELECT COUNT(*) INTO v_rows 
        FROM   employees
        WHERE  lower(last_name) = lower(v_nume);
        
        SELECT salary INTO salariu 
        FROM   employees
        WHERE  lower(last_name) = lower(v_nume);
        insert into info_dgp values
        (v_utilizator, sysdate, 
        'SELECT salary INTO salariu FROM employees WHERE lower(last_name) = lower(v_nume)',
        v_rows, NULL);
        commit;
        RETURN salariu;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            insert into info_dgp values
            (v_utilizator, sysdate, 
            'SELECT salary INTO salariu FROM employees WHERE lower(last_name) = lower(v_nume)',
            v_rows, 'Nu exista angajati cu numele dat');
            commit;
            RAISE_APPLICATION_ERROR(-20000,'Nu exista angajati cu numele dat');
        WHEN TOO_MANY_ROWS THEN
            insert into info_dgp values
            (v_utilizator, sysdate, 
            'SELECT salary INTO salariu FROM employees WHERE lower(last_name) = lower(v_nume)',
            v_rows, 'Exista mai multi angajati cu numele dat');
            commit;
            RAISE_APPLICATION_ERROR(-20001,'Exista mai multi angajati cu numele dat');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20002,'Alta eroare!');
END f2_dgp;
/

BEGIN
    DBMS_OUTPUT.PUT_LINE('Salariul este '|| f2_dgp('Cambrault'));
END;


/*ex2 cu modif. procedurii de la ex4*/
CREATE OR REPLACE PROCEDURE p4_dgp
    (v_nume employees.last_name%TYPE DEFAULT 'Bell')
IS
        salariu employees.salary%TYPE;
        v_utilizator info_dgp.utilizator%TYPE;
        v_rows number(3);
    BEGIN
        SELECT user INTO v_utilizator from dual;
        
        SELECT COUNT(*) INTO v_rows 
        FROM   employees
        WHERE  lower(last_name) = lower(v_nume);
            
        SELECT salary INTO salariu 
        FROM   employees
        WHERE  lower(last_name) = lower(v_nume);
        
        insert into info_dgp values
        (v_utilizator, sysdate, 
        'SELECT salary INTO salariu FROM employees WHERE lower(last_name) = lower(v_nume)',
        v_rows, NULL);
        commit;
        
        DBMS_OUTPUT.PUT_LINE('Salariul este '|| salariu);
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            insert into info_dgp values
            (v_utilizator, sysdate, 
            'SELECT salary INTO salariu FROM employees WHERE lower(last_name) = lower(v_nume)',
            v_rows, 'Nu exista angajati cu numele dat');
            commit;
            RAISE_APPLICATION_ERROR(-20000,'Nu exista angajati cu numele dat');
        WHEN TOO_MANY_ROWS THEN
            insert into info_dgp values
            (v_utilizator, sysdate, 
            'SELECT salary INTO salariu FROM employees WHERE lower(last_name) = lower(v_nume)',
            v_rows, 'Exista mai multi angajati cu numele dat');
            commit;
            RAISE_APPLICATION_ERROR(-20001,'Exista mai multi angajati cu numele dat');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20002,'Alta eroare!');
END p4_dgp;
/

BEGIN
    p4_dgp;
END;

/*ex3*/
CREATE OR REPLACE FUNCTION ex3_dgp
    (v_oras locations.city%TYPE)
RETURN NUMBER IS
        salariu employees.salary%type;
        v_utilizator info_dgp.utilizator%TYPE;
        v_rows number(3);
    BEGIN
        SELECT user INTO v_utilizator from dual;
        
        SELECT COUNT(*) into v_rows
        FROM locations l
        WHERE lower(v_oras) = lower(l.city);
        
        IF v_rows = 0 THEN
            insert into info_dgp values
            (v_utilizator, sysdate, 
            'SELECT COUNT(*) into v_rows FROM locations l WHERE lower(v_oras) = lower(l.city)',
            0, 'Oras inexistent');
            commit;
            RETURN 0;
        END IF;
        
        SELECT COUNT(*) INTO v_rows
        FROM employees e JOIN departments d ON (e.department_id = d.department_id)
        JOIN locations l ON (l.location_id = d.location_id)
        WHERE lower(l.city) = lower(v_oras);
        
        if v_rows = 0 then
            insert into info_dgp values
            (v_utilizator, sysdate, 
            'SELECT COUNT(*) INTO v_rows
            FROM employees e JOIN departments d ON (e.department_id = d.department_id)
            JOIN locations l ON (l.location_id = d.location_id)
            WHERE lower(l.city) = lower(v_oras)',
            0, 'Nu exista angajati care sa lucreze in orasul dat');
            commit;
            RETURN 0;
        end if;
        
        
        SELECT COUNT(*) INTO v_rows
        FROM employees e JOIN departments d ON (e.department_id = d.department_id)
        JOIN locations l ON (l.location_id = d.location_id)
        WHERE lower(l.city) = lower(v_oras) and (
            SELECT COUNT(*)
            FROM job_history j
            WHERE j.employee_id = e.employee_id) >= 2;
        
    
        insert into info_dgp values
        (v_utilizator, sysdate, 
        'SELECT COUNT(*) INTO v_rows FROM employees e JOIN departments d ON (e.department_id = d.department_id) JOIN locations l ON (l.location_id = d.location_id) WHERE lower(l.city) = lower(v_oras) and (SELECT COUNT(*) FROM job_history j WHERE j.employee_id = e.employee_id) >= 2',
        v_rows, NULL);
        commit;
        RETURN v_rows;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20000,'Nu exista orasul dat');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20002,'Alta eroare!');
END ex3_dgp;
/

BEGIN
    DBMS_OUTPUT.PUT_LINE('Nr ang = '|| ex3_dgp('seattle'));
END;

/*ex4*/
CREATE OR REPLACE PROCEDURE ex4_dgp
    (v_empid employees.employee_id%TYPE)
IS
        salariu employees.salary%TYPE;
        v_utilizator info_dgp.utilizator%TYPE;
        v_rows number(3);
        v_idaux employees.employee_id%TYPE;
        cursor c is
            SELECT e.employee_id
            FROM employees e
            WHERE v_empid = e.manager_id;
        
    BEGIN
        DBMS_OUTPUT.PUT_LINE(v_empid); 
        SELECT user INTO v_utilizator from dual;
        
        SELECT COUNT(*) into v_rows
        FROM employees e
        WHERE v_empid = e.manager_id;
        
        IF v_rows = 0 THEN
            insert into info_dgp values
            (v_utilizator, sysdate, 
            'SELECT COUNT(*) into v_rows FROM employees e WHERE ' || v_empid|| ' = e.manager_id;',
            0, 'Manager inexistent');
            commit;
            RETURN;
        END IF;
        
        UPDATE emp_dgp e
        SET e.salary = e.salary * 1.1
        WHERE e.manager_id = v_empid;
        
        insert into info_dgp values
        (v_utilizator, sysdate, 
        'UPDATE emp_dgp e SET e.salary = e.salary * 1.1 WHERE e.manager_id = ' || v_empid,
        v_rows, NULL);
        commit;
        
        open c;
        loop
            FETCH c INTO v_idaux;
            EXIT WHEN c%NOTFOUND;
            DBMS_OUTPUT.PUT_LINE(v_empid || ' - ' || v_idaux); 
            ex4_dgp(v_idaux);
        end loop;
        close c;
        RETURN;
        
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            insert into info_dgp values
            (v_utilizator, sysdate, 
            'UPDATE emp_dgp e SET e.salary = e.salary * 1.1 WHERE e.manager_id = ' || v_empid,
            0, 'Nu s-a gasit angajatul');
            RAISE_APPLICATION_ERROR(-20000,'Nu s-a gasit angajatul');
        when CURSOR_ALREADY_OPEN then
            insert into info_dgp values
            (v_utilizator, sysdate, 
            'OPEN c',
            0, 'Cursor deja deschis');
            RAISE_APPLICATION_ERROR(-20003, 'Cursor deja deschis');
        when INVALID_CURSOR then
            insert into info_dgp values
            (v_utilizator, sysdate, 
            'CLOSE c',
            0, 'Cursor deja inchis');
            RAISE_APPLICATION_ERROR(-20004, 'Cursorul este inchis');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20002,'Alta eroare!');
END ex4_dgp;
/

BEGIN
    ex4_dgp(108);
    commit;
END;

/*ex5*/
CREATE OR REPLACE PROCEDURE ex5_dgp
IS
        v_depname departments.department_name%TYPE;
        v_zimax varchar2(30);
        v_ang number(3);
        cursor c is(
            SELECT a.department_name, a.zi, a.ang
            FROM (SELECT department_name, zi, COUNT(*)ang FROM(
                    SELECT
                        d.department_name, e.employee_id, TO_CHAR(e.hire_date, 'DAY') zi
                    FROM departments d
                    LEFT OUTER JOIN employees e on d.department_id = e.department_id)
                GROUP BY (department_name, zi)
                ORDER BY department_name, ang DESC) a
            FULL OUTER JOIN(
            SELECT department_name, MAX(ang) max_ang from(
                SELECT department_name, zi, COUNT(*)ang FROM(
                    SELECT
                        d.department_name, e.employee_id, TO_CHAR(e.hire_date, 'DAY') zi
                    FROM departments d
                    LEFT OUTER JOIN employees e on d.department_id = e.department_id)
                GROUP BY (department_name, zi)
                ORDER BY department_name, ang DESC)
            GROUP BY department_name) b 
                ON a.department_name = b.department_name and a.ang = b.max_ang);
    BEGIN
        open c;
        loop
            FETCH c INTO v_depname, v_zimax, v_ang;
            EXIT WHEN c%NOTFOUND;
            IF v_zimax IS NULL THEN
                DBMS_OUTPUT.PUT_LINE('-------------------------------------');
                DBMS_OUTPUT.PUT_LINE ('DEP: '||v_depname || ' nu are angajati');
            ELSE
                DBMS_OUTPUT.PUT_LINE('-------------------------------------');
                DBMS_OUTPUT.PUT_LINE ('DEP: '||v_depname || ' DAY: ' || v_zimax || ' NR_EMP: ' || v_ang);
                DBMS_OUTPUT.PUT_LINE('-------------------------------------');
                for i in (
                    SELECT e.last_name, (sysdate-e.hire_date) exp, e.salary
                    FROM employees e
                    JOIN departments d on e.department_id = d.department_id
                    WHERE d.department_name = v_depname and TO_CHAR(e.hire_date, 'DAY') = v_zimax) loop
                    DBMS_OUTPUT.PUT_LINE (i.last_name || ' ' || ROUND(i.exp) || ' ' || i.salary);
                end loop;
            END IF;
        end loop;
        close c;
        return;
    EXCEPTION
        when INVALID_CURSOR then
            RAISE_APPLICATION_ERROR(-20004, 'Cursorul este inchis');
        when CURSOR_ALREADY_OPEN then
            RAISE_APPLICATION_ERROR(-20003, 'Cursor deja deschis');
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20000,'Nu exista orasul dat');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20002,'Alta eroare!');
END ex5_dgp;
/

BEGIN
    ex5_dgp;
END;
/


--de lucrat la exceptii
/*ex6*/
CREATE OR REPLACE PROCEDURE ex6_dgp
IS
        v_depname departments.department_name%TYPE;
        v_zimax varchar2(30);
        v_ang number(3);
        contor number(3);
        v_old number(6);
        cursor c is(
            SELECT a.department_name, a.zi, a.ang
            FROM (SELECT department_name, zi, COUNT(*)ang FROM(
                    SELECT
                        d.department_name, e.employee_id, TO_CHAR(e.hire_date, 'DAY') zi
                    FROM departments d
                    JOIN employees e on d.department_id = e.department_id)
                GROUP BY (department_name, zi)
                ORDER BY department_name, ang DESC) a
            FULL OUTER JOIN(
            SELECT department_name, MAX(ang) max_ang from(
                SELECT department_name, zi, COUNT(*)ang FROM(
                    SELECT
                        d.department_name, e.employee_id, TO_CHAR(e.hire_date, 'DAY') zi
                    FROM departments d
                    JOIN employees e on d.department_id = e.department_id)
                GROUP BY (department_name, zi)
                ORDER BY department_name, ang DESC)
            GROUP BY department_name) b 
                ON a.department_name = b.department_name and a.ang = b.max_ang);
    BEGIN
        open c;
        loop
            FETCH c INTO v_depname, v_zimax, v_ang;
            EXIT WHEN c%NOTFOUND;
            DBMS_OUTPUT.PUT_LINE('-------------------------------------');
            DBMS_OUTPUT.PUT_LINE ('DEP: '||v_depname || ' DAY: ' || v_zimax || ' NR_EMP: ' || v_ang);
            DBMS_OUTPUT.PUT_LINE('-------------------------------------');
            contor := 1;
            v_old := -1;
            for i in (
                SELECT e.last_name, (sysdate-e.hire_date) exp, e.salary
                FROM employees e
                JOIN departments d on e.department_id = d.department_id
                WHERE d.department_name = v_depname and TO_CHAR(e.hire_date, 'DAY') = v_zimax
                ORDER BY exp DESC) loop
                DBMS_OUTPUT.PUT_LINE (contor || ') ' || i.last_name || ' ' || ROUND(i.exp) || ' ' || i.salary);
                if(v_old <> i.exp) then
                    contor := contor + 1;
                    v_old := i.exp;
                end if;
            end loop;
        end loop;
        close c;
        return;
    EXCEPTION
        when INVALID_CURSOR then
            RAISE_APPLICATION_ERROR(-20004, 'Cursorul este inchis');
        when CURSOR_ALREADY_OPEN then
            RAISE_APPLICATION_ERROR(-20003, 'Cursor deja deschis');
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20000,'Nu exista orasul dat');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20002,'Alta eroare!');
END ex6_dgp;
/

BEGIN
    ex6_dgp;
END;
/

